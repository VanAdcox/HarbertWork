@page "/upload"
@rendermode InteractiveServer

<PageTitle>Blazor Server File Upload</PageTitle>

<h1>Blazor Server File Upload</h1>

<div style="margin-bottom: 20px; display: flex;">
    <div>Select your file:</div>
    <InputFile OnChange="FileUploaded" />
</div>

<h2>Selected file</h2>
<div>
	<p>File name: @FileName</p>
	<p>Rows: @readerEvents.Count()</p>
</div>
<table class="table">
	<tr>
		<th>Dev Id</th>
		<th>Machine</th>
		<th>Reader Desc</th>
		<th>Count</th>
	</tr>
	@foreach (var reader in readerDict) {
		<tr>
			<td>@reader.Key.Item1</td>
			<td>@reader.Key.Item2</td>
			<td>@reader.Value[0].ReaderDesc</td>
			<td>@reader.Value.Count()</td>
		</tr>
	}
</table>
@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div>Error: @ErrorMessage</div>
}

@code {
    public string FileName { get; set; } = "";
    public string ErrorMessage { get; set; } = "";
    private List<ReaderEvent> readerEvents = new List<ReaderEvent>();
    private Dictionary<(int, int), List<ReaderEvent>> readerDict = new Dictionary<(int, int), List<ReaderEvent>>();

    public async Task FileUploaded(InputFileChangeEventArgs e)
    {
        var browserFile = e.File;

        if (browserFile != null)
        {
            FileName = browserFile.Name;

            try
            {

		var fileStream = browserFile.OpenReadStream(long.MaxValue);

		var destinationStream = new FileStream(FileName, FileMode.Create);
                await fileStream.CopyToAsync(destinationStream);
                destinationStream.Close();

                await using var stream = browserFile.OpenReadStream(long.MaxValue);
		using var sr = new StreamReader(stream);
		readerEvents = new List<ReaderEvent>();

		await sr.ReadLineAsync();

		string line;
		while((line = await sr.ReadLineAsync()) != null) {
			string[] values = line.Split(',');
			if (values.Length >= 6)
			{
                            readerEvents.Add(new ReaderEvent(
                                values[0],
                                values[1],
                                values[2],
                                values[3],
                                Convert.ToInt32(values[4]),
                                Convert.ToInt32(values[5])
				));
                        }
		}
		readerDict = DataToDictionary(readerEvents);
            }
            catch (Exception exception)
            {
                ErrorMessage = exception.Message;
            }
        }
    }

    public Dictionary<(int, int), List<ReaderEvent>> DataToDictionary(List<ReaderEvent> masterlist) {
	Dictionary<(int, int), List<ReaderEvent>> dict = new Dictionary<(int, int), List<ReaderEvent>>();
	foreach(ReaderEvent re in masterlist) {
		var key = (re.DevId, re.Machine);
		if(!dict.ContainsKey(key)){
			dict[key] = new List<ReaderEvent>();
		}
		dict[key].Add(re);
	}
	return dict;
    }



    public class ReaderEvent {
	    public string EventTimeUTC { get; set; }
	    public string Location { get; set; }
	    public string ReaderDesc { get; set; }
	    public string IdHash { get; set; }
	    public int DevId { get; set; }
	    public int Machine { get; set; }

	    public ReaderEvent(string eventTimeUTC, string location, string readerDesc, string idHash, int devId, int machine)
	    {
		EventTimeUTC = eventTimeUTC;
		Location = location;
		ReaderDesc = readerDesc;
		IdHash = idHash;
		DevId = devId;
		Machine = machine;
	    }
	    public override string ToString()
		{
		    return $"EventTimeUTC: {EventTimeUTC}, ReaderDesc: {ReaderDesc}, IdHash: {IdHash}, DevId: {DevId}, Machine: {Machine}";
		}

    }
}
