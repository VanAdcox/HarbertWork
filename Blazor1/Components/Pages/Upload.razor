@page "/upload"
@rendermode InteractiveServer

<PageTitle>Blazor Server File Upload</PageTitle>

<h1>Blazor Server File Upload</h1>

<div style="margin-bottom: 20px; display: flex;">
    <div>Select your file:</div>
    <InputFile OnChange="FileUploaded" />
</div>

<h2>Selected file</h2>
<div>
    <div>File name: @FileName</div>
</div>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div>Error: @ErrorMessage</div>
}

@code {
    public string FileName { get; set; } = "";
    public string ErrorMessage { get; set; } = "";

    public async Task FileUploaded(InputFileChangeEventArgs e)
    {
        var browserFile = e.File;

        if (browserFile != null)
        {
            FileName = browserFile.Name;

            try
            {
                var fileStream = browserFile.OpenReadStream(browserFile.Size);

		/*
			// copies file to disk
                var randomFile = FileName;
                var extension = Path.GetExtension(browserFile.Name);
                var targetFilePath = Path.ChangeExtension(randomFile, extension);

                var destinationStream = new FileStream(targetFilePath, FileMode.Create);
                await fileStream.CopyToAsync(destinationStream);
                destinationStream.Close();
		*/
		readerEvents = ProcessCsv(ref fileStream);
            }
            catch (Exception exception)
            {
                ErrorMessage = exception.Message;
            }
        }
    }

    public List<ReaderEvent> ProcessCsv(ref Stream stream)
    {
	    StreamReader sr = new StreamReader(stream);
	    List<ReaderEvent> readerEvents = new List<ReaderEvent>();

	    while(!sr.EndOfStream) {
		string line = sr.ReadLine();
		string[] values = line.Split(',');

		foreach(string item in values) {
			readerEvents.Add(new ReaderEvent(item[0], item[1], item[2], Convert.ToInt32(item[3]), Convert.ToInt32(item[3]));
		}
	    }
	    return readerEvents;
    }

    private List<ReaderEvent> readerEvents = new List<ReaderEvent>();

    public class ReaderEvent {
	    public string EventTimeUTC { get; set; }
	    public string ReaderDesc { get; set; }
	    public string IdHash { get; set; }
	    public int DevId { get; set; }
	    public int Machine { get; set; }

	    public ReaderEvent(string eventTimeUTC, string readerDesc, string idHash, int devId, int machine)
	    {
		EventTimeUTC = eventTimeUTC;
		ReaderDesc = readerDesc;
		IdHash = idHash;
		DevId = devId;
		Machine = machine;
	    }
    }
}
